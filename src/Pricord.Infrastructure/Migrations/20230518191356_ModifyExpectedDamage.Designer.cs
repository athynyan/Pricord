// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pricord.Infrastructure.Persistence;

#nullable disable

namespace Pricord.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230518191356_ModifyExpectedDamage")]
    partial class ModifyExpectedDamage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pricord.Domain.Authentication.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Pricord.Domain.Authentication.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pricord.Domain.BattleRecords.BattleRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BossId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TimelineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BossId");

                    b.HasIndex("TimelineId")
                        .IsUnique();

                    b.ToTable("BattleRecords");
                });

            modelBuilder.Entity("Pricord.Domain.Timelines.Timeline", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("Pricord.Domain.Timelines.TimelineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AttackerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<Guid>("TimelineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TimelineId");

                    b.ToTable("TimelineItem");
                });

            modelBuilder.Entity("Pricord.Domain.Units.Boss", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Health")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("PrefabId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrefabId");

                    b.ToTable("Boss");
                });

            modelBuilder.Entity("Pricord.Domain.Units.PlayableCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BattleRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("PrefabId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BattleRecordId");

                    b.HasIndex("PrefabId");

                    b.ToTable("PlayableCharacters");
                });

            modelBuilder.Entity("Pricord.Domain.Units.Unit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Pricord.Domain.Authentication.Token", b =>
                {
                    b.HasOne("Pricord.Domain.Authentication.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pricord.Domain.BattleRecords.BattleRecord", b =>
                {
                    b.HasOne("Pricord.Domain.Units.Boss", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pricord.Domain.Timelines.Timeline", "Timeline")
                        .WithOne()
                        .HasForeignKey("Pricord.Domain.BattleRecords.BattleRecord", "TimelineId");

                    b.OwnsOne("Pricord.Domain.BattleRecords.ValueObjects.Damage", "ExpectedDamage", b1 =>
                        {
                            b1.Property<Guid>("BattleRecordId")
                                .HasColumnType("uuid");

                            b1.Property<int>("BattleType")
                                .HasColumnType("integer")
                                .HasColumnName("BattleType");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("ExpectedDamage");

                            b1.HasKey("BattleRecordId");

                            b1.ToTable("BattleRecords");

                            b1.WithOwner()
                                .HasForeignKey("BattleRecordId");
                        });

                    b.Navigation("Boss");

                    b.Navigation("ExpectedDamage")
                        .IsRequired();

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("Pricord.Domain.Timelines.Timeline", b =>
                {
                    b.OwnsOne("Pricord.Domain.Timelines.ValueObjects.Video", "Video", b1 =>
                        {
                            b1.Property<Guid>("TimelineId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("VideoType");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("VideoUrl");

                            b1.HasKey("TimelineId");

                            b1.ToTable("Timelines");

                            b1.WithOwner()
                                .HasForeignKey("TimelineId");
                        });

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Pricord.Domain.Timelines.TimelineItem", b =>
                {
                    b.HasOne("Pricord.Domain.Timelines.Timeline", "Timeline")
                        .WithMany("Items")
                        .HasForeignKey("TimelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("Pricord.Domain.Units.Boss", b =>
                {
                    b.HasOne("Pricord.Domain.Units.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("PrefabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Pricord.Domain.Units.PlayableCharacter", b =>
                {
                    b.HasOne("Pricord.Domain.BattleRecords.BattleRecord", null)
                        .WithMany("PlayableCharacters")
                        .HasForeignKey("BattleRecordId");

                    b.HasOne("Pricord.Domain.Units.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("PrefabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Pricord.Domain.Authentication.User", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Pricord.Domain.BattleRecords.BattleRecord", b =>
                {
                    b.Navigation("PlayableCharacters");
                });

            modelBuilder.Entity("Pricord.Domain.Timelines.Timeline", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
